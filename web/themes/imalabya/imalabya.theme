<?php

/**
 * @file
 * Functions to support theming in the imalabya theme.
 */

use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;

/**
 * Implements template_page_attachments_alter().
 */
function imalabya_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  $ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'X-UA-Compatible',
      'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];
}

/**
 * Implements template_theme_suggestions_page_alter().
 */
function imalabya_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }

  if (in_array(status_code(), [401, 403, 404])) {
    $suggestions[] = 'page__exception';
  }
}

/**
 * Implements template_theme_suggestions_node_alter().
 */
function imalabya_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  if (in_array(status_code(), [401, 403, 404])) {
    $suggestions[] = 'node__exception';
  }
}

/**
 * Get the status code.
 */
function status_code() {
  // Thanks to bit.ly/axl-http-error for the code snippet
  // Get Request Object.
  $request = \Drupal::request();

  // If there is HTTP Exception..
  if ($exception = $request->attributes->get('exception')) {
    // Get the status code.
    $status_code = $exception->getStatusCode();
    return $status_code;
  }
}

/**
 * Implements template_preprocess_page().
 */
function imalabya_preprocess_page(&$variables) {
  if (User::load(\Drupal::currentUser()->id())->hasRole(RoleInterface::AUTHENTICATED_ID)) {
    $variables['#attached']['library'][] = 'imalabya/admin';
  }
}

/**
 * Implements template_preprocess_node().
 */
function imalabya_preprocess_node(&$variables) {
  // Blog pager to navigate to next and previous blogs.
  $node = $variables['node'];
  $variables['previous'] = \Drupal::service('pager.previous_next')->getPreviousNode($node);
  $variables['next'] = \Drupal::service('pager.previous_next')->getNextNode($node);
  $variables['#cache']['contexts'][] = 'url';

  // Render breadcrumb.
  $block_manager = \Drupal::service('plugin.manager.block');
  $config = [];
  $plugin_block = $block_manager->createInstance('system_breadcrumb_block', $config);
  $variables['breadcrumb'] = $plugin_block->build();
}

/**
 * Implements template_preprocess_breadcrumb().
 */
function imalabya_preprocess_breadcrumb(&$variables) {
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');
  if ($node instanceof NodeInterface && $node->bundle() === 'blog') {
    $breadcrumb = [
      0 => [
        'text' => t('Home'),
        'url' => Url::fromRoute("<front>"),
      ],
      1 => [
        'text' => t('Blog'),
        'url' => Url::fromUserInput("/blog")->toString(),
      ],
    ];
  }

  $variables['breadcrumb'] = $breadcrumb;
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements template_preprocess_views_view().
 */
function imalabya_preprocess_views_view(&$variables) {
  $variables['more']['#options']['attributes']['class'] = ['more-link'];
  $variables['more']['#options']['attributes']['role'] = ['button'];
}

/**
 * Implements template_preprocess_form().
 */
function imalabya_preprocess_form(&$variables) {
  $variables['#attached']['library'][] = 'imalabya/form';
}

/**
 * Implements template_preprocess_html().
 */
function imalabya_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface && $node->bundle() === 'blog') {
    $variables['blog'] = TRUE;
    $variables['description'] = $node->body->summary;
    $variables['title'] = $node->label();
    $variables['image'] = \Drupal::request()->getSchemeAndHttpHost() . '/' . \Drupal::theme()->getActiveTheme()->getPath() . '/mugshot.jpg';
    $variables['url'] = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['asolute' => TRUE]);
  }

}
